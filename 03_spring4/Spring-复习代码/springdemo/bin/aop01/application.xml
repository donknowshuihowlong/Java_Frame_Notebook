<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">

	<!-- 准备工作: 导入aop(约束)命名空间 -->
	<!-- 1.配置目标对象 -->
	<bean name="userService" class="aop01.UserServiceImpl"></bean>
	<!-- 2.配置通知对象 -->
	<bean name="myAdvice" class="aop01.MyAdvice"></bean>
	<!-- 3.配置将通知织入目标对象 -->
	<aop:config>
		<!-- 配置切入点
		这几种写法都是一样的
		 public void aop01.UserServiceImpl.save() 
		 void aop01.UserServiceImpl.save() 
		 * aop01.UserServiceImpl.save()
		 * aop01.UserServiceImpl.*()
		 * aop01.*ServiceImpl.*(..)  开发中使用这个，代表返回值为任意，aop01包下以及子包下的以包含ServiceImpl.java的任意方法，参数任意
 		 * aop01..*ServiceImpl.*(..) 
 		 -->
		<aop:pointcut expression="execution(* aop01.*ServiceImpl.*(..))"
			id="pc" />
		<aop:aspect ref="myAdvice">
			<!-- 指定名为before方法作为前置通知 -->
			<aop:before method="before" pointcut-ref="pc" />
			<!-- 后置 -->
			<aop:after-returning method="afterReturning"
				pointcut-ref="pc" />
			<!-- 环绕通知 -->
			<aop:around method="around" pointcut-ref="pc" />
			<!-- 异常拦截通知 -->
			<aop:after-throwing method="afterException"
				pointcut-ref="pc" />
			<!-- 后置 -->
			<aop:after method="after" pointcut-ref="pc" />
		</aop:aspect>
	</aop:config>
</beans>